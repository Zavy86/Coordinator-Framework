<?php
/**
 * Collection
 *
 * @package Coordinator\Classes
 * @author  Manuel Zavatta <manuel.zavatta@gmail.com>
 * @link    http://www.coordinator.it
 */

/**
 * Collection class
 */
class cCollection implements Iterator,Countable{

	/** Properties */
	private $index;
	private $items_array;

	/**
	 * Iterator methods @inheritDoc
	 */
	public function current(){return $this->items_array[$this->index];}
	public function key(){return $this->index;}
	public function next(){$this->index++;}
	public function rewind(){$this->index=0;}
	public function valid(){return isset($this->items_array[$this->key()]);}
	public function count(){return count($this->items_array);}

	public function reverse(){
		$this->items_array=array_reverse($this->items_array);
		$this->rewind();
	}

	/**
	 * Collection class
	 *
	 * @param object[] $objects Array of objects
	 * @param string $key Property name for key
	 * @param string $id Collection ID, if null randomly generated
	 * @param boolean $overwrite Overwrite existing object key
	 * @return boolean
	 * @throws Exception
	 */
	public function __construct(array $objects=array(),$key=null,$overwrite=true){
		// reset index
		$this->rewind();
		// check parameters
		if(!is_array($objects)){return false;}
		// cycle all objects
		foreach($objects as $object_fobj){$this->addItem($object_fobj,($key!==null?$object_fobj->$key:null),$overwrite);}
		// return
		return true;
	}

	/**
	 * Exists
	 * Check if item key already exists
	 *
	 * @param mixed $key Item key
	 * @return boolean
	 */
	public function exists($key){return array_key_exists($key,$this->items_array);}

	/**
	 * Add Item
	 *
	 * @param mixed $object Object to add
	 * @param mixed $key Item key, if null autogenerated
	 * @param boolean $overwrite Overwrite existing object key
	 * @return boolean
	 * @throws Exception
	 */
	public function addItem($object,$key=null,$overwrite=true){
		// check parameters
		if(!is_object($object)){throw new Exception("Collection, item must be an object..");}
		// check for key exists if overwrite is disabled
		if(!$overwrite && $this->exists($key)){throw new Exception("Collection, the key \"".$key."\" already exists and overwrite is disabled..");}
		// check for key and add to items array
		if($key!==null){$this->items_array[$key]=$object;}
		else{$this->items_array[]=$object;}
		// return
		return true;
	}

	/**
	 * Remove Item
	 *
	 * @param mixed $key Item key
	 * @param boolean $exists Check exists
	 * @return boolean
	 * @throws Exception
	 */
	public function removeItem($key,$exists=false){
		// check for key exists
		if(!$this->exists($key)){
			// return or throw
			if(!$exists){return false;}
			else{throw new Exception("Collection, the key \"".$key."\" not exists and check is enabled..");}
		}
		// remove from items array
		unset($this->items_array[$key]);
		// return
		return true;
	}

	/**
	 * Export
	 *
	 * @param string $format Export format ( array | json )
	 * @return array|string|false
	 * @throws Exception
	 */
	public function export($format="array"){
		// check parameters
		if(!in_array($format,array("array","json"))){throw new Exception("Collection, format \"".$format."\" is not defined..");}
		switch($format){
			case "array":return $this->items_array;break;
			case "json":return json_encode($this->items_array);break;
		}
		// return
		return false;
	}

}
